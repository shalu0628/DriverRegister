pragma solidity ^0.5.8;

contract DriverRegister{
    
    enum CarType {mini, micro,prime}
     
     struct Driver{
        string name;
        uint phno;
        uint licenceno;
        bool isDriverRegistered;
        CarType cartypes;
        uint driverId;
        address driverAddr;
    }
    
   
    mapping(address => Driver) public driverStructs;
    address[] public drivers;
    
   
    
    function registerDriver(address payable driverAddr, string memory _name, uint _phno, uint _licenceno, CarType _cartype) public payable{
       //check if driver is already registered.
       
       require(drivers[driverStructs[driverAddr].driverId]==driverAddr,"Already Registered");
       address payAddr=address(this);
       require(payAddr.balance>0);
       require(driverAddr.balance>3);
        driverAddr.transfer(payAddr.balance+2);
        driverStructs[driverAddr].name=_name;
        driverStructs[driverAddr].phno=_phno;
        driverStructs[driverAddr].licenceno=_licenceno;
        driverStructs[driverAddr].cartypes=(_cartype);
        driverStructs[driverAddr].isDriverRegistered = true;
        driverStructs[driverAddr].driverId=drivers.push(driverAddr)-1;
      
    }
}
